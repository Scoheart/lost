name: Deploy to Aliyun ECS

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Backend build and deployment
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    
    - name: Build with Maven
      run: |
        cd backend
        mvn clean package -DskipTests
    
    # Frontend build
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false

    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install frontend dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile
    
    - name: Build frontend for production
      run: |
        cd frontend
        echo "Starting frontend build..."
        echo "Current directory: $(pwd)"
        echo "Node version: $(node -v)"
        echo "PNPM version: $(pnpm -v)"
        NODE_ENV=production VITE_DEBUG=true pnpm run build:prod
        echo "✅ Frontend build completed successfully!"
      continue-on-error: false
    
    # Setup SSH for deployment
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.ALIYUN_SSH_PRIVATE_KEY }}
    
    - name: Add Aliyun ECS to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.ALIYUN_HOST }} >> ~/.ssh/known_hosts
    
    # Server preparation
    - name: Prepare server environment
      run: |
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          # 检查MySQL服务
          if ! systemctl is-active --quiet mysql; then
            echo "MySQL服务未运行，正在启动..."
            sudo systemctl start mysql
          fi
          
          # 检查Redis服务
          if ! systemctl is-active --quiet redis-server; then
            echo "Redis服务未运行，正在启动..."
            sudo systemctl start redis-server
          fi
          
          # 确保数据库存在
          echo "正在检查和创建数据库..."
          mysql -u root -p${{ secrets.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS lost_and_found CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
          
          # 确保部署目录存在并有适当权限
          mkdir -p ${{ secrets.DEPLOY_PATH }}/logs
          mkdir -p ${{ secrets.DEPLOY_PATH }}/uploads
          chmod -R 755 ${{ secrets.DEPLOY_PATH }}
        '
    
    # Ensure deployment directories exist
    - name: Ensure deploy directories exist
      run: |
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} "mkdir -p ${{ secrets.DEPLOY_PATH }} ${{ secrets.FRONTEND_DEPLOY_PATH }}"
    
    # Deploy backend
    - name: Upload JAR to Aliyun ECS
      run: |
        cd backend
        scp target/*.jar ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/app.jar
    
    - name: Upload deploy script
      run: |
        cd backend
        scp deploy.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/deploy.sh
    
    - name: Deploy and Restart Backend Application
      run: |
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          cd ${{ secrets.DEPLOY_PATH }} && 
          chmod +x deploy.sh && 
          ./deploy.sh
        '
    
    # Deploy frontend
    - name: Deploy frontend to Nginx
      run: |
        cd frontend
        # Zip the dist directory to make transfer faster
        tar -czvf dist.tar.gz -C dist .
        scp dist.tar.gz ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.FRONTEND_DEPLOY_PATH }}/
        
        # Extract and set permissions on the server
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          cd ${{ secrets.FRONTEND_DEPLOY_PATH }} &&
          rm -rf * &&
          tar -xzvf dist.tar.gz &&
          rm dist.tar.gz &&
          # Set proper permissions for Nginx
          chmod -R 755 .
        '
    
    # Upload and configure Nginx (if needed)
    - name: Configure Nginx
      run: |
        # Use DOMAIN_NAME if available, otherwise fall back to server IP
        SERVER_NAME="${{ secrets.DOMAIN_NAME || secrets.ALIYUN_HOST }}"
        
        echo '
        server {
            listen 80;
            server_name '"$SERVER_NAME"';
            
            # Frontend - serve static files
            location / {
                root ${{ secrets.FRONTEND_DEPLOY_PATH }};
                index index.html;
                try_files $uri $uri/ /index.html;
            }
            
            # Backend API proxy
            location /api {
                proxy_pass http://localhost:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
        ' > nginx.conf
        
        # Upload and apply Nginx configuration
        scp nginx.conf ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/lostandfound.conf
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          sudo mv /tmp/lostandfound.conf /etc/nginx/conf.d/lostandfound.conf &&
          sudo nginx -t &&
          sudo systemctl reload nginx
        ' 