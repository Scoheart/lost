name: 部署到阿里云ECS

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'devops/**'
  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    # SSH设置
    - name: 设置SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.ALIYUN_SSH_PRIVATE_KEY }}
    
    - name: 添加服务器到known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -t rsa,dsa,ecdsa,ed25519 ${{ secrets.ALIYUN_HOST }} >> ~/.ssh/known_hosts
    
    - name: 测试SSH连接
      run: |
        echo "正在测试SSH连接..."
        ssh -o ConnectTimeout=10 ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} 'echo "SSH连接成功！"'
    
    # 服务器初始化
    - name: 初始化服务器
      run: |
        echo "准备运行初始化脚本..."
        # 上传必要脚本
        scp devops/scripts/server-init.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        scp devops/scripts/init-database.sql ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        scp devops/scripts/init-database.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        
        # 设置执行权限
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          chmod +x /tmp/server-init.sh
          chmod +x /tmp/init-database.sh
        '
        
        # 执行初始化脚本
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          # 执行服务器初始化
          sudo /tmp/server-init.sh "${{ secrets.DB_PASSWORD }}" "${{ secrets.DEPLOY_PATH }}" "${{ secrets.FRONTEND_DEPLOY_PATH }}"
        '
    
    # 后端构建和部署
    - name: 设置JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    
    - name: 使用Maven构建后端
      run: |
        cd backend
        echo "正在构建后端应用..."
        mvn clean package -DskipTests
        echo "✅ 后端构建完成"
    
    - name: 部署后端应用
      run: |
        echo "正在部署后端应用..."
        # 上传生产环境配置
        scp devops/config/application-prod.yml ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/application-prod.yml
        
        # 上传部署脚本
        scp devops/scripts/deploy-backend.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/deploy.sh
        
        # 上传JAR文件
        cd backend
        scp target/*.jar ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/app.jar
        
        # 执行部署脚本
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          cd ${{ secrets.DEPLOY_PATH }} && 
          chmod +x deploy.sh && 
          ./deploy.sh
        '
    
    # 前端构建和部署
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: 安装pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false
    
    - name: 安装前端依赖
      run: |
        cd frontend
        pnpm install --frozen-lockfile
    
    - name: 构建前端项目
      run: |
        cd frontend
        echo "开始构建前端应用..."
        NODE_ENV=production pnpm run build:prod
        echo "✅ 前端构建完成"
    
    - name: 部署前端文件
      run: |
        cd frontend
        # 打包dist目录
        tar -czvf dist.tar.gz -C dist .
        scp dist.tar.gz ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.FRONTEND_DEPLOY_PATH }}/
        
        # 在服务器上解压
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          cd ${{ secrets.FRONTEND_DEPLOY_PATH }} &&
          rm -rf * &&
          tar -xzvf dist.tar.gz &&
          rm dist.tar.gz &&
          chmod -R 755 .
        '
    
    # 配置Nginx
    - name: 配置Nginx
      run: |
        # 上传Nginx配置脚本
        scp devops/scripts/setup-nginx.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        
        # 执行Nginx配置
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          chmod +x /tmp/setup-nginx.sh
          sudo /tmp/setup-nginx.sh "${{ secrets.FRONTEND_DEPLOY_PATH }}" "${{ secrets.DOMAIN_NAME || secrets.ALIYUN_HOST }}"
        '
    
    - name: 部署完成通知
      run: |
        echo "🎉 部署完成！"
        echo "应用地址: http://${{ secrets.DOMAIN_NAME || secrets.ALIYUN_HOST }}" 