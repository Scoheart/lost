name: 部署到阿里云ECS

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'devops/**'
  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    # SSH设置
    - name: 设置SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.ALIYUN_SSH_PRIVATE_KEY }}
    
    - name: 添加服务器到known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -t rsa,dsa,ecdsa,ed25519 ${{ secrets.ALIYUN_HOST }} >> ~/.ssh/known_hosts
    
    - name: 测试SSH连接
      run: |
        echo "正在测试SSH连接..."
        ssh -o ConnectTimeout=10 ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} 'echo "SSH连接成功！"'
    
    # 服务器初始化
    - name: 初始化服务器
      run: |
        echo "准备运行初始化脚本..."
        # 上传必要脚本
        scp devops/scripts/server-init.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        scp devops/scripts/init-database.sql ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        scp devops/scripts/init-database.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        
        # 设置执行权限
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          chmod +x /tmp/server-init.sh
          chmod +x /tmp/init-database.sh
        '
        
        # 执行初始化脚本
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          # 执行服务器初始化
          sudo /tmp/server-init.sh "${{ secrets.DB_PASSWORD }}" "${{ secrets.DEPLOY_PATH }}" "${{ secrets.FRONTEND_DEPLOY_PATH }}"
        '
    
    # 后端构建和部署
    - name: 设置JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    
    - name: 使用Maven构建后端
      run: |
        cd backend
        echo "正在构建后端应用..."
        mvn clean package -DskipTests
        echo "✅ 后端构建完成"
    
    - name: 部署后端应用
      run: |
        echo "正在部署后端应用..."
        # 处理配置文件 - 安全地替换占位符
        TEMP_CONFIG=$(mktemp)
        # 使用perl代替sed，更安全地处理特殊字符
        perl -p -e 's/\$\{DB_PASSWORD:your_password_here\}/$ENV{DB_PASSWORD}/g' devops/config/application-prod.yml > $TEMP_CONFIG
        DB_PASSWORD="${{ secrets.DB_PASSWORD }}" # 设置环境变量供perl使用
        
        # 上传处理后的生产环境配置
        scp $TEMP_CONFIG ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/application-prod.yml
        rm $TEMP_CONFIG
        
        # 上传部署脚本
        scp devops/scripts/deploy-backend.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/deploy.sh
        
        # 上传JAR文件
        cd backend
        scp target/*.jar ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.DEPLOY_PATH }}/app.jar
        
        # 执行部署脚本
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          cd ${{ secrets.DEPLOY_PATH }} && 
          chmod +x deploy.sh && 
          ./deploy.sh "${{ secrets.DEPLOY_PATH }}" "${{ secrets.DB_PASSWORD }}"
        '
    
    # 前端构建和部署
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: 安装pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9
        run_install: false
    
    - name: 安装前端依赖
      run: |
        cd frontend
        pnpm install --frozen-lockfile
    
    - name: 构建前端项目
      run: |
        cd frontend
        echo "开始构建前端应用..."
        # 检查Vite配置文件
        if [ -f "vite.config.ts" ]; then
          echo "检测到Vite配置文件，添加明确的输出目录设置..."
          # 临时添加输出目录配置
          sed -i '/build: {/a \    outDir: "dist",' vite.config.ts
          cat vite.config.ts
        fi
        
        NODE_ENV=production pnpm run build:prod
        echo "✅ 前端构建完成"
        
        # 检查构建目录结构
        echo "检查构建输出目录结构..."
        ls -la
        if [ -d "dist" ]; then
          echo "dist目录内容:"
          ls -la dist
        else
          echo "警告: 没有找到dist目录，列出当前目录内容:"
          ls -la
          echo "寻找构建产物..."
          find . -type f -name "*.js" | head -5
          find . -type f -name "*.css" | head -5
          find . -type f -name "index.html" | head -1
        fi
    
    - name: 部署前端文件
      run: |
        cd frontend
        
        # 检查构建输出目录
        BUILD_DIR="dist"
        if [ ! -d "$BUILD_DIR" ]; then
          echo "警告: 未找到标准dist目录，尝试查找实际的构建输出..."
          
          # 首先尝试查找index.html位置
          INDEX_HTML_PATH=$(find . -type f -name "index.html" | grep -v "node_modules" | head -1)
          
          if [ -n "$INDEX_HTML_PATH" ]; then
            # 提取目录部分 (如果在根目录,则为".")
            INDEX_DIR=$(dirname "$INDEX_HTML_PATH")
            echo "找到index.html在: $INDEX_DIR"
            
            if [ "$INDEX_DIR" = "." ]; then
              echo "构建文件在当前目录，创建临时目录来收集文件..."
              mkdir -p temp-dist
              # 复制所有可能的构建产物
              cp -r *.js *.css *.html *.ico assets/ temp-dist/ 2>/dev/null || true
              BUILD_DIR="temp-dist"
            else
              BUILD_DIR="$INDEX_DIR"
              echo "使用构建目录: $BUILD_DIR"
            fi
          else
            echo "未找到index.html，创建临时目录收集所有可能的构建文件..."
            mkdir -p temp-dist
            
            # 查找并收集所有JS和CSS文件，但排除node_modules
            find . -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" -o -name "*.ico" \) \
              -not -path "./node_modules/*" -not -path "./src/*" \
              -exec cp --parents {} temp-dist/ \; 2>/dev/null || true
            
            # 复制assets目录如果存在
            if [ -d "assets" ]; then
              cp -r assets temp-dist/
            fi
            
            BUILD_DIR="temp-dist"
          fi
        else
          echo "使用标准dist目录"
        fi
        
        echo "准备打包目录: $BUILD_DIR"
        # 检查构建目录中是否有文件
        if [ -z "$(ls -A $BUILD_DIR 2>/dev/null)" ]; then
          echo "错误: 构建目录为空，无法继续部署"
          echo "当前工作目录内容:"
          ls -la
          exit 1
        fi
        
        # 创建压缩包
        echo "创建压缩包..."
        tar -czvf frontend-dist.tar.gz -C $BUILD_DIR .
        
        # 上传压缩包
        echo "上传前端文件到服务器..."
        scp frontend-dist.tar.gz ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:${{ secrets.FRONTEND_DEPLOY_PATH }}/
        
        # 在服务器上解压
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          cd ${{ secrets.FRONTEND_DEPLOY_PATH }} &&
          mkdir -p backup &&
          if [ -f "index.html" ]; then
            echo "创建当前文件备份..." &&
            cp -r * backup/ 2>/dev/null || true
          fi &&
          echo "清理目录..." &&
          rm -rf *.js *.css *.html *.ico assets/ &&
          echo "解压新文件..." &&
          tar -xzvf frontend-dist.tar.gz &&
          rm frontend-dist.tar.gz &&
          echo "设置权限..." &&
          chmod -R 755 .
        '
    
    # 配置Nginx
    - name: 配置Nginx
      run: |
        # 上传Nginx配置脚本
        scp devops/scripts/setup-nginx.sh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }}:/tmp/
        
        # 执行Nginx配置
        ssh ${{ secrets.ALIYUN_USER }}@${{ secrets.ALIYUN_HOST }} '
          chmod +x /tmp/setup-nginx.sh
          sudo /tmp/setup-nginx.sh "${{ secrets.FRONTEND_DEPLOY_PATH }}" "${{ secrets.DOMAIN_NAME || secrets.ALIYUN_HOST }}"
        '
    
    - name: 部署完成通知
      run: |
        echo "🎉 部署完成！"
        echo "应用地址: http://${{ secrets.DOMAIN_NAME || secrets.ALIYUN_HOST }}" 